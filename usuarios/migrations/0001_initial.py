# Generated by Django 4.1.7 on 2024-03-04 20:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('nombre', models.CharField(max_length=191, null=True, verbose_name='Nombre')),
                ('curp', models.CharField(max_length=18, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1}[AEIOU]{1}[A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}[0-9]{1}$', 'Debe ser un CURP valido.')], verbose_name='CURP')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-is_superuser', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='Institucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Institución')),
                ('puntos', models.IntegerField(default=0, verbose_name='Puntos')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
            ],
            options={
                'verbose_name': 'Institución',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve_mun', models.PositiveIntegerField(verbose_name='Clave Municipio')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Municipio')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('estado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.estado', verbose_name='Estado')),
            ],
            options={
                'ordering': ['estado', 'nombre'],
                'unique_together': {('estado', 'cve_mun')},
            },
        ),
        migrations.CreateModel(
            name='PuntajeGeneral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('1-Genero', 'Género'), ('2-Ingresos', 'Ingresos'), ('3-Tipo de solicitud', 'Tipo de solicitud'), ('4-Periodo', 'Periodo'), ('5-Promedio', 'Promedio')], max_length=50, verbose_name='Tipo de Puntaje')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre')),
                ('puntos', models.IntegerField(default=0, verbose_name='Puntos')),
            ],
            options={
                'verbose_name': 'Puntaje General',
                'verbose_name_plural': 'Puntajes Generales',
                'ordering': ['tipo', 'id'],
            },
        ),
        migrations.CreateModel(
            name='PuntajeMunicipio',
            fields=[
                ('municipio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='usuarios.municipio')),
                ('puntos', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Carrera')),
                ('puntos', models.IntegerField(default=0, verbose_name='Puntos')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('deleted_at', models.DateTimeField(null=True, verbose_name='deleted_at')),
                ('institucion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.institucion', verbose_name='Institución')),
            ],
            options={
                'verbose_name': 'Carrera',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Solicitante',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('folio', models.CharField(blank=True, max_length=14, null=True, verbose_name='Folio')),
                ('rfc', models.CharField(max_length=13, null=True, unique=True, validators=[django.core.validators.RegexValidator('^([A-ZÑ&]{3,4}) ?(?:- ?)?(\\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\\d|3[01])) ?(?:- ?)?([A-Z\\d]{2})([A\\d])$', 'Debe tener el formato de un RFC valido.')], verbose_name='RFC')),
                ('ap_paterno', models.CharField(max_length=45, null=True, verbose_name='Apellido Paterno')),
                ('ap_materno', models.CharField(blank=True, max_length=45, null=True, verbose_name='Apellido Materno')),
                ('fecha_nacimiento', models.DateField(null=True, verbose_name='Fecha de Nacimiento')),
                ('genero', models.CharField(choices=[('Masculino', 'Masculino'), ('Femenino', 'Femenino'), ('Otro', 'Otro')], max_length=255, null=True, verbose_name='Genero')),
                ('g_etnico', models.BooleanField(null=True, verbose_name='Origen Etnico')),
                ('colonia', models.CharField(max_length=255, null=True, verbose_name='Colonia/Fraccionamiento')),
                ('calle', models.CharField(max_length=255, null=True, verbose_name='Calle')),
                ('numero', models.CharField(max_length=25, null=True, verbose_name='Numero Domicilio')),
                ('codigo_postal', models.CharField(max_length=5, null=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(5)], verbose_name='Codigo Postal')),
                ('tel_cel', models.CharField(max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.MaxLengthValidator(10)], verbose_name='Telefono Celular')),
                ('tel_fijo', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.MaxLengthValidator(10)], verbose_name='Telefono Fijo')),
                ('grado', models.CharField(choices=[('01', '01'), ('02', '02'), ('03', '03'), ('04', '04'), ('05', '05'), ('06', '06'), ('07', '07'), ('08', '08'), ('09', '09'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15')], max_length=2, null=True, verbose_name='Semestre/Cuatrimestre')),
                ('promedio', models.DecimalField(decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MaxValueValidator(limit_value=10.0), django.core.validators.MinValueValidator(limit_value=0.0)], verbose_name='Promedio')),
                ('email_verified_at', models.DateTimeField(null=True, verbose_name='email_verified_at')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('carrera', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuarios.carrera', verbose_name='Carrera')),
                ('municipio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuarios.municipio', verbose_name='Delegación/Municipio')),
            ],
            options={
                'verbose_name': 'Solicitante',
                'permissions': [('permisos_solicitante', 'Permisos para solicitantes')],
            },
            bases=('usuarios.usuario',),
        ),
    ]
