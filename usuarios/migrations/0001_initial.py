# Generated by Django 4.1.7 on 2023-04-18 20:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(max_length=191, null=True, verbose_name='Nombre')),
                ('curp', models.CharField(max_length=18, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{18}$', 'Debe tener exactamente 18 caracteres alfanuméricos.')], verbose_name='CURP')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='Institucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Institucion')),
                ('puntos', models.IntegerField(null=True, verbose_name='Puntos')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Municipio')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('estado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.estado', verbose_name='Estado')),
            ],
        ),
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=191, verbose_name='Nombre Carrera')),
                ('puntos', models.IntegerField(verbose_name='Puntos')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('deleted_at', models.DateTimeField(null=True, verbose_name='deleted_at')),
                ('institucion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.institucion', verbose_name='Instituciones')),
            ],
        ),
        migrations.CreateModel(
            name='Solicitante',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('rfc', models.CharField(max_length=13, null=True, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-zñÑ&]{3,4}\\d{6}\\w{3}$', 'Debe tener el formato de un RFC.')], verbose_name='RFC')),
                ('ap_paterno', models.CharField(max_length=45, null=True, verbose_name='Apellido Paterno')),
                ('ap_materno', models.CharField(blank=True, max_length=45, null=True, verbose_name='Apellido Materno')),
                ('fecha_nacimiento', models.DateField(null=True, verbose_name='Fecha de Nacimiento')),
                ('genero', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=255, verbose_name='Genero')),
                ('edad', models.IntegerField(null=True, verbose_name='Edad')),
                ('g_etnico', models.BooleanField(null=True, verbose_name='Origen Etnico')),
                ('colonia', models.CharField(max_length=255, null=True, verbose_name='Colonia')),
                ('calle', models.CharField(max_length=255, null=True, verbose_name='Calle')),
                ('numero', models.CharField(max_length=5, null=True, verbose_name='Numero')),
                ('codigo_postal', models.IntegerField(null=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(5)], verbose_name='Codigo Postal')),
                ('tel_cel', models.IntegerField(null=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.MaxLengthValidator(10)], verbose_name='Telefono Celular')),
                ('tel_fijo', models.IntegerField(null=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(10)], verbose_name='Telefono Fijo')),
                ('Grado', models.IntegerField(null=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(2)], verbose_name='Grado')),
                ('promedio', models.FloatField(null=True, verbose_name='Promedio')),
                ('email_verified_at', models.DateTimeField(null=True, verbose_name='email_verified_at')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated_at')),
                ('carrera', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='usuarios.carrera', verbose_name='Carrera')),
                ('municipio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='usuarios.municipio', verbose_name='Municipio')),
            ],
            options={
                'verbose_name': 'Solicitante',
                'permissions': [('permisos_solicitante', 'Permisos para solicitantes')],
            },
            bases=('usuarios.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
